#-------------Node Class and Constructor for the Binary Tree-------------#
class Node:
    def __init__(self, data=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
        
#----------Task 1--------------------------------------------------#
def height(root): 
    if root!=None:
        if height(root.left)>height(root.right):
            return 1+height(root.left)
        return 1+height(root.right)
    return -1

#----------Task 2--------------------------------------------------#
def FindLevel(root,key,level=1):
    if root==None:
        return 0    #Tree is null
    elif root.data==key:
        return level   #keyfound
    nextLevel = FindLevel(root.left,key,level+1) 
    if nextLevel!=0:
        return nextLevel       
    return FindLevel(root.right,key,level+1) 

#----------Task 3--------------------------------------------------#
def preorder_print(root):
    if root is not None:            #PreOrder Root -> Left -> Right
        print(root.data, end=" ")
        preorder_print(root.left)
        preorder_print(root.right)
        
#----------Task 4--------------------------------------------------#

def inorder_print(root):
    if root is not None:                  #InOrder   Left -> Root -> Right
        inorder_print(root.left)
        print(root.data, end=" ")
        inorder_print(root.right)
        
#----------Task 5--------------------------------------------------#

def postorder_print(root):
    if root is not None:                 #PostOrder   Left ->  Right ->  Root 
        postorder_print(root.left)
        postorder_print(root.right)
        print(root.data, end=" ")

#----------Task 6--------------------------------------------------#

        
def check(root1,root2):     
    if root1==root2==None:
        return True
    elif  root1.data==root2.data and check(root1.left,root2.left) and  check(root1.right,root2.right):
        return True
    return False

#----------Task 7--------------------------------------------------#


def Tree_Copy(root):
    if (root == None):
        return None
    createNode = Node(root.data)
    createNode.left = Tree_Copy(root.left)
    createNode.right = Tree_Copy(root.right)
    return createNode
        

#-----------------TESTER ----------------------------------#

#First let's create a  sample binary tree to test our tasks. We name this tree "root"
#  ::::::::::::Our binary tree will look like this below::::::

#               1
#           /       \  
#          2          3  
#         /  \      /   \
#        4    8     5   6 
#                  / 
#                  7